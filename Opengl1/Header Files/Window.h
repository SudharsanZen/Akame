#pragma once
#include<iostream>
#include<glad/glad.h>
#include<GLFW/glfw3.h>



class Window
{
protected:
	
private:
	
	//window intialization height and width
	int Height, Width;
	//render buffer dimensions. (usually updated every time using a callback function when the windows reasize event occurs)
	int bufferHeight, bufferWidth;

	std::string windowName;
	//window class to share opengl context with
	Window* share;
	//main GLFWwindow pointer.(generated by a call to create window)
	std::shared_ptr<GLFWwindow> mainWindow;

	
public:
	Window(int height,int width,std::string,Window*);
	~Window();
	friend class Editor;
	friend class Input;
	

	int getBufferHeight() 
	{
		//get windows buffer Height
		if (mainWindow)
			glfwGetFramebufferSize(mainWindow.get(), &bufferWidth, &bufferHeight);
		else
			std::cout <<"window ptr has been deleted or has not been initialized!\n";
		return bufferHeight; 
	}
	int getBufferWidth() 
	{
		//get windows buffer width
		if (mainWindow)
			glfwGetFramebufferSize(mainWindow.get(), &bufferWidth, &bufferHeight); 
		else
			std::cout << "window ptr has been destroyed or has not been intialized!\n";
		return bufferWidth; 
	}

	bool Window::shouldWindowClose()
	{
		//returns true if windows close event has occured
		if (mainWindow)
			return glfwWindowShouldClose(mainWindow.get());
		else
		{
			std::cerr << "ERROR::initialize window first!" << std::endl;
			return true;
		}
	}
	void swapBuffers()
	{
		if (mainWindow)
			glfwSwapBuffers(mainWindow.get());
		else
			std::cout << "window ptr has been deleted or has not been initialized!\n";
	}

	bool initialize();
	void setBufferSizeCallBackFunction(GLFWframebuffersizefun function);
	void processInput();
	
};

