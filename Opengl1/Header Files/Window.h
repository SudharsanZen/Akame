#pragma once
#include<iostream>
#include<glad/glad.h>
#include<GLFW/glfw3.h>


class Window
{
protected:
	
private:
	
	//window intialization height and width
	int Height, Width;
	//render buffer dimensions. (usually updated every time using a callback function when the windows reasize event occurs)
	int bufferHeight, bufferWidth;

	std::string windowName;
	//window class to share opengl context with
	Window* share;
public:
	Window(int height,int width,std::string,Window*);
	~Window();

	//main GLFWwindow pointer.(generated by a call to create window)
	GLFWwindow* mainWindow;

	int getBufferHeight() 
	{
		//get windows buffer Height
		glfwGetFramebufferSize(mainWindow, &bufferWidth, &bufferHeight); 
		return bufferHeight; 
	};
	int getBufferWidth() 
	{
		//get windows buffer width
		glfwGetFramebufferSize(mainWindow, &bufferWidth, &bufferHeight); 
		return bufferWidth; 
	};
	
	bool initialize();
	void setBufferSizeCallBackFunction(GLFWframebuffersizefun function);
	bool shouldWindowClose();
	void swapBuffers() { glfwSwapBuffers(mainWindow); };
	void processInput();
	
};

