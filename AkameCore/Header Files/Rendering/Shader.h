#pragma once
#include<functional>
#include<string>
#include<map>
#include"Math/EngineMath.h"
class Shader
{
private:
	void ParseUniforms();
	std::map<std::string, unsigned int> uniformLocationMap;
	friend class Material;
	friend class DisplacementMap;
	//fragementShader and vertex Shader's directory
	std::string fragDir, vertDir,geoDir;
	//programID: to reference the shaderProgram generated by a call to compileShader
	unsigned int programID;

	char** readShaderFile(std::string,unsigned int&);
	bool compileShader();
	void addShader(char** shaderCode, unsigned int shaderID, unsigned int codeLen, unsigned int shaderType);
	void freeCodePointer(char**,unsigned int);
	void deleteProgram();
	friend class Material;
	friend class RenderingSystem;
	void setUniformMat4fv(unsigned int, unsigned int count, float* valuePtr);
public:
	Shader();
	Shader(std::string vertexShaderDir,std::string fragmentShaderDir,std::string geometryShaderDir);
	Shader(std::string vertexShaderDir,std::string fragmentShaderDir);
	
	void setShaderFileLocation(std::string vert, std::string frag) { vertDir = vert; fragDir = frag; };

	//functions for setting uniform variables
	unsigned int getUniformLocation(std::string varName);
	void setUniformInteger(std::string varName, unsigned int value);
	void setUniformInteger(unsigned int uniformLoc, unsigned int value);

	void setUniformVec3(std::string varName, const glm::vec3& vec);
	void setUniformMat4fv(std::string varName, unsigned int count, float* valuePtr);
	void setUniformMat4fvArray(std::string varName, unsigned int index, float* valuePtr);
	void setUniformFloat(std::string varName, float value);
	//call this to use this shader program
	void useShaderProgram();

	//will be called along with "useShaderProgram()"
	//std::function<void(GLuint)> callAfterUseProgram;
	
	~Shader();
	

};

