#pragma once

#include<string>
#include<memory>
#include"AkameCore.h"
typedef void* (*GLADloadproc)(const char* name);
typedef struct GLFWwindow GLFWwindow;
class Window
{
protected:
	
private:
	friend class Editor;
	friend class Input;
	friend class Exporter;
	//window intialization height and width
	int Height, Width;
	//render buffer dimensions. (usually updated every time using a callback function when the windows reasize event occurs)
	int bufferHeight, bufferWidth;

	std::string windowName;
	//window class to share opengl context with
	Window* share;
	//main GLFWwindow pointer.(generated by a call to create window)
	std::shared_ptr<GLFWwindow> mainWindow;
	AKAME_API void SetCurrentContext(void* glfwContextPtr);
	AKAME_API GLFWwindow* getCurrContext();
public:
	AKAME_API Window(int height,int width,std::string,Window* shr=nullptr);
	AKAME_API ~Window();
	AKAME_API GLADloadproc GetProcAddress();

	AKAME_API int getBufferHeight();
	AKAME_API int getBufferWidth();

	AKAME_API bool closeWindow();
	AKAME_API void swapBuffers();

	AKAME_API bool initialize();
	AKAME_API void setBufferSizeCallBackFunction(void (*function)(GLFWwindow*, int, int) );
	AKAME_API void processInput();
	
};

